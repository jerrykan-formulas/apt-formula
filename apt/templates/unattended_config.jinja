{%- set unattended = pillar.get('apt', {}).get('unattended', {}) -%}

{%- set allowed_origins = unattended.get('allowed_origins', [
    'origin=Debian,codename=${distro_codename},label=Debian-Security',
]) -%}
{%- set package_blacklist = unattended.get('package_blacklist', []) -%}

{%- macro option(name, value, default) -%}
    {%- if value is none -%}
        //{{ name }} "{{ default }}";
    {%- else -%}
        {{ name }} "{{ value }}";
    {%- endif -%}
{%- endmacro -%}

{%- macro bool_option(name, value, default) -%}
    {%- if value is none -%}
        //{{ name }} "{{ 'true' if default else 'false' }}";
    {%- else -%}
        {{ name }} "{{ 'true' if value else 'false' }}";
    {%- endif -%}
{%- endmacro -%}

// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded.
//
// Lines below have the format format is "keyword=value,...".  A
// package will be upgraded only if the values in its metadata match
// all the supplied keywords in a line.  (In other words, omitted
// keywords are wild cards.) The keywords originate from the Release
// file, but several aliases are accepted.  The accepted keywords are:
//   a,archive,suite (eg, "stable")
//   c,component     (eg, "main", "crontrib", "non-free")
//   l,label         (eg, "Debian", "Debian-Security")
//   o,origin        (eg, "Debian", "Unofficial Multimedia Packages")
//   n,codename      (eg, "jessie", "jessie-updates")
//     site          (eg, "http.debian.net")
// The available values on the system are printed by the command
// "apt-cache policy", and can be debugged by running
// "unattended-upgrades -d" and looking at the log file.
//
// Within lines unattended-upgrades allows 2 macros whose values are
// derived from /etc/debian_version:
//   ${distro_id}            Installed origin.
//   ${distro_codename}      Installed codename (eg, "jessie")
Unattended-Upgrade::Origins-Pattern {
        // Codename based matching:
        // This will follow the migration of a release through different
        // archives (e.g. from testing to stable and later oldstable).
//      "o=Debian,n=jessie";
//      "o=Debian,n=jessie-updates";
//      "o=Debian,n=jessie-proposed-updates";
//      "o=Debian,n=jessie,l=Debian-Security";

        // Archive or Suite based matching:
        // Note that this will silently match a different release after
        // migration to the specified archive (e.g. testing becomes the
        // new stable).
//      "o=Debian,a=stable";
//      "o=Debian,a=stable-updates";
//      "o=Debian,a=proposed-updates";
{%- if allowed_origins is list -%}
    {%- for pattern in allowed_origins %}
        "{{ pattern }}";
    {%- endfor %}
{%- else %}
        "{{ allowed_origins }}";
{%- endif %}
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
//      "vim";
//      "libc6";
//      "libc6-dev";
//      "libc6-i686";
{%- if package_blacklist is list %}
    {%- for package in package_blacklist %}
        "{{ package }}";
    {%- endfor %}
{%- else %}
        "{{ package_blacklist }}"
{%- endif %}
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
{{ bool_option('Unattended-Upgrade::AutoFixInterruptedDpkg',
                unattended.get('auto_fix_interrupted_dpkg'),
                False)
}}

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
{{ bool_option('Unattended-Upgrade::MinimalSteps',
                unattended.get('minimal_steps'),
                True)
}}

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
{{ bool_option('Unattended-Upgrade::InstallOnShutdown',
                unattended.get('install_on_shutdown'),
                True)
}}

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
{{ option('Unattended-Upgrade::Mail',
          unattended.get('mail'),
          'root')
}}

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
{{ bool_option('Unattended-Upgrade::MailOnlyOnError',
                unattended.get('mail_only_on_error'),
                True)
}}

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
{{ bool_option('Unattended-Upgrade::Remove-Unused-Dependencies',
                unattended.get('remove_unused_dependencies'),
                False)
}}

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade
{{ bool_option('Unattended-Upgrade::Automatic-Reboot',
                unattended.get('automatic_reboot'),
                False)
}}

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
{{ option('Unattended-Upgrade::Automatic-Reboot-Time',
          unattended.get('automatic_reboot_time'),
          '02:00')
}}

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
{{ option('Acquire::http::Dl-Limit',
          unattended.get('dl_limit'),
          70)
}}
